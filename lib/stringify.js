"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const encode_1 = require("./encode");
const util_1 = require("./util");
function encodeComponent(item, charset) {
    item = String(item);
    if (util_1.isASCII(item)) {
        item = encodeURIComponent(item);
    }
    else {
        item = encode_1.encode(item, charset);
    }
    return item;
}
exports.encodeComponent = encodeComponent;
function stringify(obj, prefix, options) {
    if (typeof prefix !== 'string') {
        options = prefix || {};
        prefix = null;
    }
    let charset = options.charset || 'utf-8';
    if (Array.isArray(obj)) {
        return stringifyArray(obj, prefix, options);
    }
    else if ('string' === typeof obj) {
        return stringifyString(obj, prefix, options);
    }
    else if ('[object Object]' === {}.toString.call(obj)) {
        return stringifyObject(obj, prefix, options);
    }
    return prefix + '=' + encodeComponent(String(obj), charset);
}
exports.stringify = stringify;
function stringifyString(str, prefix, options) {
    if (!prefix) {
        throw new TypeError('stringify expects an object');
    }
    let charset = options.charset;
    return prefix + '=' + encodeComponent(str, charset);
}
function stringifyArray(arr, prefix, options) {
    let ret = [];
    if (!prefix) {
        throw new TypeError('stringify expects an object');
    }
    for (let i = 0; i < arr.length; i++) {
        ret.push(stringify(arr[i], prefix + '[' + i + ']', options));
    }
    return ret.join('&');
}
function stringifyObject(obj, prefix, options) {
    let ret = [];
    let keys = Object.keys(obj);
    let key;
    let charset = options.charset;
    for (let i = 0, len = keys.length; i < len; ++i) {
        key = keys[i];
        if ('' === key) {
            continue;
        }
        if (null === obj[key]) {
            ret.push(encode_1.encode(key, charset) + '=');
        }
        else {
            ret.push(stringify(obj[key], prefix ? prefix + '[' + encodeComponent(key, charset) + ']' : encodeComponent(key, charset), options));
        }
    }
    return ret.join('&');
}
exports.default = stringify;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaW5naWZ5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3RyaW5naWZ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7QUFFYixxQ0FBa0M7QUFFbEMsaUNBQWlDO0FBU2pDLFNBQWdCLGVBQWUsQ0FBQyxJQUEyQixFQUFFLE9BQWU7SUFFM0UsSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNwQixJQUFJLGNBQU8sQ0FBQyxJQUFJLENBQUMsRUFDakI7UUFDQyxJQUFJLEdBQUcsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDaEM7U0FFRDtRQUNDLElBQUksR0FBRyxlQUFNLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0tBQzdCO0lBQ0QsT0FBTyxJQUFJLENBQUM7QUFDYixDQUFDO0FBWkQsMENBWUM7QUFFRCxTQUFnQixTQUFTLENBQUMsR0FBb0IsRUFBRSxNQUFtQyxFQUFFLE9BQTJCO0lBRS9HLElBQUksT0FBTyxNQUFNLEtBQUssUUFBUSxFQUM5QjtRQUNDLE9BQU8sR0FBRyxNQUFNLElBQUksRUFBRSxDQUFDO1FBQ3ZCLE1BQU0sR0FBRyxJQUFJLENBQUM7S0FDZDtJQUVELElBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDO0lBQ3pDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFDdEI7UUFDQyxPQUFPLGNBQWMsQ0FBQyxHQUFHLEVBQUUsTUFBYSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0tBQ25EO1NBQ0ksSUFBSSxRQUFRLEtBQUssT0FBTyxHQUFHLEVBQ2hDO1FBQ0MsT0FBTyxlQUFlLENBQUMsR0FBRyxFQUFFLE1BQWEsRUFBRSxPQUFPLENBQUMsQ0FBQztLQUNwRDtTQUNJLElBQUksaUJBQWlCLEtBQUssRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQ3BEO1FBQ0MsT0FBTyxlQUFlLENBQUMsR0FBRyxFQUFFLE1BQWEsRUFBRSxPQUFPLENBQUMsQ0FBQztLQUNwRDtJQUVELE9BQU8sTUFBTSxHQUFHLEdBQUcsR0FBRyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQzdELENBQUM7QUF2QkQsOEJBdUJDO0FBRUQsU0FBUyxlQUFlLENBQUMsR0FBVyxFQUFFLE1BQWMsRUFBRSxPQUEwQjtJQUUvRSxJQUFJLENBQUMsTUFBTSxFQUNYO1FBQ0MsTUFBTSxJQUFJLFNBQVMsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO0tBQ25EO0lBQ0QsSUFBSSxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQztJQUM5QixPQUFPLE1BQU0sR0FBRyxHQUFHLEdBQUcsZUFBZSxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUNyRCxDQUFDO0FBRUQsU0FBUyxjQUFjLENBQUMsR0FBeUIsRUFBRSxNQUFjLEVBQUUsT0FBMEI7SUFFNUYsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDO0lBQ2IsSUFBSSxDQUFDLE1BQU0sRUFDWDtRQUNDLE1BQU0sSUFBSSxTQUFTLENBQUMsNkJBQTZCLENBQUMsQ0FBQztLQUNuRDtJQUNELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUNuQztRQUNDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztLQUM3RDtJQUNELE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN0QixDQUFDO0FBRUQsU0FBUyxlQUFlLENBQUMsR0FBMEIsRUFBRSxNQUFjLEVBQUUsT0FBMEI7SUFFOUYsSUFBSSxHQUFHLEdBQWEsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDNUIsSUFBSSxHQUFHLENBQUM7SUFFUixJQUFJLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDO0lBQzlCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQy9DO1FBQ0MsR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLElBQUksRUFBRSxLQUFLLEdBQUcsRUFDZDtZQUNDLFNBQVM7U0FDVDtRQUNELElBQUksSUFBSSxLQUFLLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFDckI7WUFDQyxHQUFHLENBQUMsSUFBSSxDQUFDLGVBQU0sQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7U0FDckM7YUFFRDtZQUNDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUNqQixHQUFHLENBQUMsR0FBRyxDQUFDLEVBQ1IsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsR0FBRyxHQUFHLGVBQWUsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxFQUMzRixPQUFPLENBQ1AsQ0FBQyxDQUFDO1NBQ0g7S0FDRDtJQUVELE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN0QixDQUFDO0FBRUQsa0JBQWUsU0FBUyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IGVuY29kZSB9IGZyb20gJy4vZW5jb2RlJztcbmltcG9ydCB7IElTdHJpbmdpZnlPcHRpb25zIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyBpc0FTQ0lJIH0gZnJvbSAnLi91dGlsJztcblxuZXhwb3J0IHR5cGUgSUVuY29kZUNvbXBvbmVudElucHV0ID0gc3RyaW5nIHwgbnVtYmVyIHwgYm9vbGVhbjtcblxuZXhwb3J0IHR5cGUgSVN0cmluZ2lmeUlucHV0QXJyYXkgPSBhbnlbXTtcbmV4cG9ydCB0eXBlIElTdHJpbmdpZnlJbnB1dE9iamVjdCA9IFJlY29yZDxhbnksIGFueT47XG5cbmV4cG9ydCB0eXBlIElTdHJpbmdpZnlJbnB1dCA9IElTdHJpbmdpZnlJbnB1dEFycmF5IHwgc3RyaW5nIHwgSVN0cmluZ2lmeUlucHV0T2JqZWN0IHwgdW5rbm93bjtcblxuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZUNvbXBvbmVudChpdGVtOiBJRW5jb2RlQ29tcG9uZW50SW5wdXQsIGNoYXJzZXQ6IHN0cmluZylcbntcblx0aXRlbSA9IFN0cmluZyhpdGVtKTtcblx0aWYgKGlzQVNDSUkoaXRlbSkpXG5cdHtcblx0XHRpdGVtID0gZW5jb2RlVVJJQ29tcG9uZW50KGl0ZW0pO1xuXHR9XG5cdGVsc2Vcblx0e1xuXHRcdGl0ZW0gPSBlbmNvZGUoaXRlbSwgY2hhcnNldCk7XG5cdH1cblx0cmV0dXJuIGl0ZW07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdpZnkob2JqOiBJU3RyaW5naWZ5SW5wdXQsIHByZWZpeD86IHN0cmluZyB8IElTdHJpbmdpZnlPcHRpb25zLCBvcHRpb25zPzogSVN0cmluZ2lmeU9wdGlvbnMpOiBzdHJpbmdcbntcblx0aWYgKHR5cGVvZiBwcmVmaXggIT09ICdzdHJpbmcnKVxuXHR7XG5cdFx0b3B0aW9ucyA9IHByZWZpeCB8fCB7fTtcblx0XHRwcmVmaXggPSBudWxsO1xuXHR9XG5cblx0bGV0IGNoYXJzZXQgPSBvcHRpb25zLmNoYXJzZXQgfHwgJ3V0Zi04Jztcblx0aWYgKEFycmF5LmlzQXJyYXkob2JqKSlcblx0e1xuXHRcdHJldHVybiBzdHJpbmdpZnlBcnJheShvYmosIHByZWZpeCBhcyBhbnksIG9wdGlvbnMpO1xuXHR9XG5cdGVsc2UgaWYgKCdzdHJpbmcnID09PSB0eXBlb2Ygb2JqKVxuXHR7XG5cdFx0cmV0dXJuIHN0cmluZ2lmeVN0cmluZyhvYmosIHByZWZpeCBhcyBhbnksIG9wdGlvbnMpO1xuXHR9XG5cdGVsc2UgaWYgKCdbb2JqZWN0IE9iamVjdF0nID09PSB7fS50b1N0cmluZy5jYWxsKG9iaikpXG5cdHtcblx0XHRyZXR1cm4gc3RyaW5naWZ5T2JqZWN0KG9iaiwgcHJlZml4IGFzIGFueSwgb3B0aW9ucyk7XG5cdH1cblxuXHRyZXR1cm4gcHJlZml4ICsgJz0nICsgZW5jb2RlQ29tcG9uZW50KFN0cmluZyhvYmopLCBjaGFyc2V0KTtcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5U3RyaW5nKHN0cjogc3RyaW5nLCBwcmVmaXg6IHN0cmluZywgb3B0aW9uczogSVN0cmluZ2lmeU9wdGlvbnMpXG57XG5cdGlmICghcHJlZml4KVxuXHR7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignc3RyaW5naWZ5IGV4cGVjdHMgYW4gb2JqZWN0Jyk7XG5cdH1cblx0bGV0IGNoYXJzZXQgPSBvcHRpb25zLmNoYXJzZXQ7XG5cdHJldHVybiBwcmVmaXggKyAnPScgKyBlbmNvZGVDb21wb25lbnQoc3RyLCBjaGFyc2V0KTtcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5QXJyYXkoYXJyOiBJU3RyaW5naWZ5SW5wdXRBcnJheSwgcHJlZml4OiBzdHJpbmcsIG9wdGlvbnM6IElTdHJpbmdpZnlPcHRpb25zKVxue1xuXHRsZXQgcmV0ID0gW107XG5cdGlmICghcHJlZml4KVxuXHR7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignc3RyaW5naWZ5IGV4cGVjdHMgYW4gb2JqZWN0Jyk7XG5cdH1cblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspXG5cdHtcblx0XHRyZXQucHVzaChzdHJpbmdpZnkoYXJyW2ldLCBwcmVmaXggKyAnWycgKyBpICsgJ10nLCBvcHRpb25zKSk7XG5cdH1cblx0cmV0dXJuIHJldC5qb2luKCcmJyk7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeU9iamVjdChvYmo6IElTdHJpbmdpZnlJbnB1dE9iamVjdCwgcHJlZml4OiBzdHJpbmcsIG9wdGlvbnM6IElTdHJpbmdpZnlPcHRpb25zKVxue1xuXHRsZXQgcmV0OiBzdHJpbmdbXSA9IFtdO1xuXHRsZXQga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG5cdGxldCBrZXk7XG5cblx0bGV0IGNoYXJzZXQgPSBvcHRpb25zLmNoYXJzZXQ7XG5cdGZvciAobGV0IGkgPSAwLCBsZW4gPSBrZXlzLmxlbmd0aDsgaSA8IGxlbjsgKytpKVxuXHR7XG5cdFx0a2V5ID0ga2V5c1tpXTtcblx0XHRpZiAoJycgPT09IGtleSlcblx0XHR7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cdFx0aWYgKG51bGwgPT09IG9ialtrZXldKVxuXHRcdHtcblx0XHRcdHJldC5wdXNoKGVuY29kZShrZXksIGNoYXJzZXQpICsgJz0nKTtcblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdHJldC5wdXNoKHN0cmluZ2lmeShcblx0XHRcdFx0b2JqW2tleV0sXG5cdFx0XHRcdHByZWZpeCA/IHByZWZpeCArICdbJyArIGVuY29kZUNvbXBvbmVudChrZXksIGNoYXJzZXQpICsgJ10nIDogZW5jb2RlQ29tcG9uZW50KGtleSwgY2hhcnNldCksXG5cdFx0XHRcdG9wdGlvbnMsXG5cdFx0XHQpKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmV0LmpvaW4oJyYnKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3RyaW5naWZ5O1xuIl19